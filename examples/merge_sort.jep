/*
 * merge sort implementation
 */
import "io";

/**
 * prints the contents of an array
 *
 * params:
 *   a - the array to be printed
 */
function printArray(a) {
	local i, l = len(a);
	write("[");
	for (i = 0; i < l; i++) {
		if(typeof(a[i]) == "array") {
			printArray(a[i]);
		} else {
			write(a[i]);	
		}
		if (i < l - 1) {
			write(", ");
		}
	}
	write("]");
}

/**
 * An implementation of the merge sort algorithm using pass by value
 * and a comparator function passed as an argument
 *
 * params:
 *   a - the array to be sorted
 *   n - the number of runs
 *   c - comparator function
 */
function mergeSortVal(a, n, c) {

	if (n == 1) {
		return a;
	}

	local 
		h,     // half of n
		left,  // left run
		right, // right run
		i,     // left index
		j,     // right index
		k,     // merged index
		merge; // merged list

	h = n / 2;

	left = [h];
	right = [n - h]; // account for odd n

	for (i = 0; i < h; i++) {
		left[i] = a[i];
	}

	for (j = 0; j < n - h; j++) {
		right[j] = a[j+h];
	}

	left = mergeSortVal(left, h, c);
	right = mergeSortVal(right, n - h, c);

	merge = [n];

	i = 0; j = 0; k = 0;

	while (i < h || j < n - h) {
		if (i == h && j < n - h) {
			merge[k++] = right[j++];
		} else if (i < h && j == n - h) {
			merge[k++] = left[i++];
		} else if ( c(left[i], right[j]) ) {
			merge[k++] = left[i++];
		} else {
			merge[k++] = right[j++];
		}
	}

	return merge;
}

/**
 * An implementation of the merge sort algorithm using pass by reference
 *
 * params:
 *   a - a reference to the array to be sorted
 *   n - the number of runs
 */
function mergeSortRef(a, n) {

	if (n == 1) {
		return ::a;
	}

	local 
		h,     // half of n
		left,  // left run
		right, // right run
		i,     // left index
		j,     // right index
		k,     // merged index
		merge; // merged list

	h = n / 2;

	left = [h];
	right = [n - h]; // account for odd n

	for (i = 0; i < h; i++) {
		left[i] = (::a)[i];
	}

	for (j = 0; j < n - h; j++) {
		right[j] = (::a)[j+h];
	}

	mergeSortRef(:left, h);
	mergeSortRef(:right, n - h);

	merge = [n];

	i = 0; j = 0; k = 0;

	while (i < h || j < n - h) {
		if (i == h && j < n - h) {
			merge[k++] = right[j++];
		} else if (i < h && j == n - h) {
			merge[k++] = left[i++];
		} else if ( left[i] < right[j] ) {
			merge[k++] = left[i++];
		} else {
			merge[k++] = right[j++];
		}
	}

	::a = merge;
}

/**
 * a comparator function. it compares two things.
 *
 * params:
 *   a - the left operand of the comparison
 *   b - the right operand of the comparison
 */
function comparator(a, b) {
	return a < b;
}

//local i; for (i = 0; i < 1000; i++) { // memory leak test

	local array = {
		6, 1, 3, 10, 11, 8, 7, 14, 15,
		2, 13, 4, 9, 5, 17, 12, 16
	};

	write("unsorted:            ");
	printArray(array);
	writeln("");

	// BEGIN pass-by-value
	local sortedVal = mergeSortVal(array, len(array), comparator);

	write("sorted by value:     ");
	printArray(sortedVal);
	writeln("");
	// END pass-by-value

	// BEGIN pass-by-reference
	mergeSortRef(:array, len(array));

	write("sorted by reference: ");
	printArray(array);
	writeln("");
	// END pass-by-reference

//} // memory leak test
